dispatch_by_seq_and_item.ps1

param(
  [Parameter(Mandatory=$true)][string]$CsvPath,     # CSV: SEQ,項目名1,項目名2,...
  [Parameter(Mandatory=$true)][string]$SourceDir,   # 実ファイルが全てある場所（Downloads など）
  [Parameter(Mandatory=$true)][string]$TargetBase,  # 出力ルート
  [switch]$Move                                     # 指定時は移動（既定はコピー）
)

# CSV読込（自動でヘッダー→列名コレクションを持つ）
$rows = Import-Csv -Path $CsvPath

if (-not $rows) { Write-Error "CSVにデータがありません。"; exit 1 }

# すべての列名を取得（1列目はSEQ、2列目以降が項目名）
$headers = ($rows | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name)
if ($headers.Count -lt 2 -or $headers[0] -ne 'SEQ') {
  Write-Error "ヘッダーの1列目は 'SEQ' にしてください。"
  exit 1
}

$notFound = New-Object System.Collections.Generic.List[Object]
$errors   = New-Object System.Collections.Generic.List[Object]

foreach ($row in $rows) {
  $seq = [string]$row.SEQ
  if ([string]::IsNullOrWhiteSpace($seq)) { continue }

  # 2列目以降を走査（列名＝サブフォルダ名として使う）
  foreach ($col in $headers[1..($headers.Count-1)]) {
    $cell = [string]$row.$col
    if ([string]::IsNullOrWhiteSpace($cell)) { continue }

    # セル内の複数ファイル対応：改行/セミコロン/カンマで分割
    $names = $cell -split "(`r`n|`n|`r|;|,)" |
             ForEach-Object { $_.Trim() } |
             Where-Object { $_ -ne "" }

    foreach ($name in $names) {
      # 元ファイル（大文字小文字・全角半角の微差は許容して候補探索）
      $src = Join-Path $SourceDir $name
      if (-not (Test-Path -LiteralPath $src -PathType Leaf)) {
        $candidate = Get-ChildItem -LiteralPath $SourceDir -File -ErrorAction SilentlyContinue |
                     Where-Object { $_.Name -ieq $name } | Select-Object -First 1
        if ($candidate) { $src = $candidate.FullName } else {
          $notFound.Add([pscustomobject]@{SEQ=$seq; 項目名=$col; FileName=$name; Reason='not found'})
          continue
        }
      }

      # 出力先フォルダ：TargetBase\SEQ\項目名\
      $destDir = Join-Path (Join-Path $TargetBase $seq) $col
      try { New-Item -ItemType Directory -Path $destDir -Force | Out-Null } catch {
        $errors.Add([pscustomobject]@{SEQ=$seq; 項目名=$col; FileName=$name; Stage='CreateDir'; Error=$_.Exception.Message})
        continue
      }

      $destPath = Join-Path $destDir ([IO.Path]::GetFileName($src))
      try {
        if ($Move.IsPresent) { Move-Item -LiteralPath $src -Destination $destPath -Force }
        else                 { Copy-Item -LiteralPath $src -Destination $destPath -Force }
        Write-Host "OK: $seq / $col / $(Split-Path $destPath -Leaf)"
      } catch {
        $errors.Add([pscustomobject]@{SEQ=$seq; 項目名=$col; FileName=$name; Stage='CopyOrMove'; Error=$_.Exception.Message})
      }
    }
  }
}

# ログ
$base = [IO.Path]::ChangeExtension($CsvPath, $null)
if ($notFound.Count -gt 0) {
  $nf = "$base.not_found.log.csv"; $notFound | Export-Csv $nf -NoTypeInformation -Encoding UTF8
  Write-Warning "未検出ファイル一覧: $nf"
}
if ($errors.Count -gt 0) {
  $er = "$base.errors.log.csv"; $errors | Export-Csv $er -NoTypeInformation -Encoding UTF8
  Write-Warning "エラー一覧: $er"
}
Write-Host "完了。"